@model LibraryHW03.Models.CombinedViewModel
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

@{
    ViewBag.Title = "Popular Books Report";
    var popularBooksData = ViewData["PopularBooksData"];
}

<div class="row">
    <div class="col-md-6">
        <canvas id="barChart" width="400" height="300"></canvas>
        <input type="text" id="filename" placeholder="Enter filename">
        <input type="text" id="description" placeholder="Enter description">
        <button id="save">Save</button>
    </div>
    <div class="col-md-6">
        <canvas id="pieChart" width="400" height="300"></canvas>
    </div>
</div>

<!-- Table to display saved reports -->
<div class="row">
    <div class="col-md-12">
        <h2>Saved Reports</h2>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Filename</th>
                    <th>Description</th>
                    <th>Download</th>
                </tr>
            </thead>
            <tbody id="savedReportsTable">
                <!-- Saved reports will be added here dynamically -->
            </tbody>
        </table>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var data = @Html.Raw(popularBooksData);

        var bookNames = data.map(function (item) {
            return item.BookName;
        });

        var borrowCounts = data.map(function (item) {
            return item.BorrowCount;
        });

        var ctx = document.getElementById('barChart').getContext('2d');
        var pieCtx = document.getElementById('pieChart').getContext('2d');

        var barChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: bookNames,
                datasets: [{
                    label: 'Borrow Count',
                    data: borrowCounts,
                    backgroundColor: [
                        'rgba(255, 228, 196, 0.7)', // Beige
                        'rgba(255, 99, 71, 0.7)', // Red
                        'rgba(255, 165, 0, 0.7)', // Orange
                    ],
                    borderColor: [
                        'rgba(255, 228, 196, 1)', // Beige
                        'rgba(255, 99, 71, 1)', // Red
                        'rgba(255, 165, 0, 1)', // Orange
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                animation: {
                    duration: 0
                },
                plugins: {
                    legend: {
                        display: false
                    },
                    title: {
                        display: true,
                        text: 'Popular Books Report',
                        font: {
                            size: 16
                        }
                    }
                }
            }
        });

        var pieColors = [
            'rgba(244, 164, 96, 0.7)', // Light Brown
            'rgba(124, 252, 0, 0.7)', // Green
            'rgba(255, 99, 71, 0.7)', // Red
            'rgba(255, 165, 0, 0.7)', // Orange
            'rgba(255, 192, 203, 0.7)', // Pink
            'rgba(173, 216, 230, 0.7)', // Light Blue
            'rgba(255, 0, 255, 0.7)', // Magenta
            'rgba(0, 0, 255, 0.7)', // Blue
            'rgba(0, 128, 128, 0.7)', // Teal
            'rgba(128, 0, 128, 0.7)', // Purple
            'rgba(0, 255, 0, 0.7)', // Lime
            'rgba(128, 128, 0, 0.7)' // Olive
        ];

        var pieChart = new Chart(pieCtx, {
            type: 'pie',
            data: {
                labels: bookNames,
                datasets: [{
                    data: borrowCounts,
                    backgroundColor: pieColors,
                    borderWidth: 1
                }]
            },
            options: {
                plugins: {
                    legend: {
                        display: false
                    },
                    title: {
                        display: true,
                        text: 'Popular Books Report',
                        font: {
                            size: 16
                        }
                    }
                }
            }
        });

        var filenameInput = document.getElementById("filename");
        var descriptionInput = document.getElementById("description");
        var savedReportsTable = document.getElementById("savedReportsTable");

        // Function to add a saved report to the table
        function addSavedReport(filename, description, fileExtension) {
            var newRow = savedReportsTable.insertRow(1); // Insert at the top
            var cell1 = newRow.insertCell(0);
            var cell2 = newRow.insertCell(1);
            var cell3 = newRow.insertCell(2);

            cell1.innerHTML = filename;
            cell2.innerHTML = description;

            var downloadLink = document.createElement("a");
            downloadLink.textContent = "Download";
            downloadLink.href = "/download/report?filename=" + filename + "&extension=" + fileExtension;
            downloadLink.download = filename + "." + fileExtension; // Set the download attribute

            cell3.appendChild(downloadLink);
        }

        // Event listener for the Save button
        document.getElementById("save").addEventListener("click", function () {
            var filename = filenameInput.value || "chart_export";
            var description = descriptionInput.value || "No Description";

            // You can specify the file extension or modify this code to determine it based on the chosen format.

            // For example, if you want to use PNG:
            var fileExtension = "png";

            // Add the saved report to the table
            addSavedReport(filename, description, fileExtension);

            // Clear the filename and description inputs
            filenameInput.value = "";
            descriptionInput.value = "";
        });
    });
</script>
